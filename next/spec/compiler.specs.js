// Generated by CoffeeScript 1.3.1
(function() {
  var Compiler, FP, badCoffee, badHaml, badKup, badLess, badMarkdown, badSass, badScss, badStylus, compareOutput, compiler, fp, goodCoffee, goodHaml, goodJs, goodKup, goodLess, goodMarkdown, goodSass, goodScss, goodStylus, hamlHtml, kupHtml, lessCss, log, markdownHtml, path, sassCss, scssCss, stripSpace, stylusCss, _;

  _ = require("underscore");

  log = require("./logMock.coffee").log;

  FP = require("./fsMock.coffee").fsProvider;

  Compiler = require("../src/compile.coffee").compiler;

  path = require("path");

  require("should");

  fp = new FP();

  compiler = new Compiler(fp, log);

  stripSpace = function(content) {
    return content.replace(/\s/g, "");
  };

  compareOutput = function(one, two) {
    return (stripSpace(one)).should.equal(stripSpace(two));
  };

  goodCoffee = "class GoodClass\n	constructor: ( @name ) ->\n\n	method: () ->\n		console.log 'this is a method call!'\n";

  goodJs = "var GoodClass;\n\nGoodClass = (function() {\n\nfunction GoodClass(name) {\n  this.name = name;\n}\n\nGoodClass.prototype.method = function() {\n  return console.log('this is a method call!');\n};\n\nreturn GoodClass;\n\n})();";

  badCoffee = "var Test = function( name ) {\n	console.log( 'This is bad coffee, yo :(' );\n};";

  goodKup = "doctype 5\nhtml ->\n  head ->\n  body ->\n    div class: \"hero-unit\", -> \n      h1 \"Learn CoffeeKup ... I have no idea why\"\n      span class: \"snark\", \"Maybe to prove you can do it\"";

  kupHtml = "<!DOCTYPE html>\n<html>\n  <head>\n  </head>\n  <body>\n    <div class=\"hero-unit\">\n      <h1>Learn CoffeeKup ... I have no idea why</h1>\n      <span class=\"snark\">Maybe to prove you can do it</span>\n    </div>\n  </body>\n</html>";

  badKup = "<html>\n	<body>\n		<span>This isn't going to work out</span>\n	</body>\n</html>";

  goodHaml = "!!!\n%html\n  %head\n  %body\n    .hero-unit\n      %h1 Learn HAML For Fun And Profit\n      %span.snark Great good seems like reaching a bit...";

  hamlHtml = "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html>\n  <head></head>\n  <body>\n    <div class=\"hero-unit\">\n      <h1>Learn HAML For Fun And Profit</h1>\n      <span class=\"snark\">Great good seems like reaching a bit...</span>\n    </div>\n  </body>\n</html>";

  badHaml = "TURP";

  goodMarkdown = "# This Has Limited Uses\n\n	* Use it for content\n	* Let Anvil combine it into pages like a mix-in";

  markdownHtml = "<h1>This Has Limited Uses</h1>\n<pre><code>\n* Use it for content\n* Let Anvil combine it into pages like a mix-in\n</code></pre>";

  badMarkdown = "!()[{}]";

  goodLess = ".rounded-corners (@radius: 5px) {\n  border-radius: @radius;\n  -webkit-border-radius: @radius;\n  -moz-border-radius: @radius;\n}\n\n#header {\n  .rounded-corners;\n}\n#footer {\n  .rounded-corners(10px);\n}";

  lessCss = "#header {\n  border-radius: 5px;\n  -webkit-border-radius: 5px;\n  -moz-border-radius: 5px;\n}\n#footer {\n  border-radius: 10px;\n  -webkit-border-radius: 10px;\n  -moz-border-radius: 10px;\n}";

  badLess = "this shouldn't work";

  goodSass = "$blue: #3bbfce\n$margin: 16px\n\n.content-navigation\n  border-color: $blue\n  color: darken($blue, 9%)\n\n.border\n  padding: $margin / 2\n  margin: $margin / 2\n  border-color: $blue";

  sassCss = ".content-navigation {\n  border-color: #3bbfce;\n  color: #2b9eab;\n}\n\n.border {\n  padding: 8px;\n  margin: 8px;\n  border-color: #3bbfce;\n}";

  badSass = "this shouldn't work";

  goodScss = "$blue: #3bbfce;\n$margin: 16px;\n\n.content-navigation {\n  border-color: $blue;\n  color:\n    darken($blue, 9%);\n}\n\n.border {\n  padding: $margin / 2;\n  margin: $margin / 2;\n  border-color: $blue;\n}";

  scssCss = ".content-navigation {\n  border-color: #3bbfce;\n  color: #2b9eab;\n}\n\n.border {\n  padding: 8px;\n  margin: 8px;\n  border-color: #3bbfce;\n}";

  badScss = "this shouldn't work";

  goodStylus = "font-size = 14px\n\nbody\n   font font-size Arial, sans-serif";

  stylusCss = "body {\n   font: 14px Arial, sans-serif;\n }";

  badStylus = "this shouldn't work";

  describe("when compiling valid coffeescript", function() {
    var file;
    file = {
      name: "good.coffee",
      workingPath: "tmp",
      ext: function() {
        return path.extname(this.name);
      }
    };
    fp.reset();
    before(function(done) {
      return fp.write("tmp/good.coffee", goodCoffee, function() {
        return compiler.compile(file, function() {
          return done();
        });
      });
    });
    it("should create a JavaScript file", function() {
      return fp.pathExists([file.workingPath, file.name].should.be.ok);
    });
    return it("should produce valid JavaScript", function(done) {
      return fp.read([file.workingPath, file.name], function(content) {
        compareOutput(content, goodJs);
        return done();
      });
    });
  });

  describe("when compiling invalid coffeescript", function() {
    var errorCode, file;
    file = {
      name: "good.coffee",
      workingPath: "tmp",
      ext: function() {
        return path.extname(this.name);
      }
    };
    errorCode = void 0;
    fp.reset();
    before(function(done) {
      return fp.write("tmp/good.coffee", badCoffee, function() {
        return compiler.compile(file, function(err) {
          errorCode = err;
          return done();
        });
      });
    });
    it("should not create a JavaScript file", function() {
      return fp.pathExists([file.workingPath, file.name]).should.not.be;
    });
    return it("should produce error message", function(done) {
      return fp.read([file.workingPath, file.name], function(content) {
        errorCode.toString().should.equal('SyntaxError: Reserved word "var" on line 1');
        return done();
      });
    });
  });

  describe("when compiling valid coffeekup", function() {
    var file;
    file = {
      name: "good.kup",
      workingPath: "tmp",
      ext: function() {
        return path.extname(this.name);
      }
    };
    fp.reset();
    before(function(done) {
      return fp.write("tmp/good.kup", goodKup, function() {
        return compiler.compile(file, function() {
          return done();
        });
      });
    });
    it("should create a html file", function() {
      return fp.pathExists([file.workingPath, file.name].should.be.ok);
    });
    return it("should produce valid html", function(done) {
      return fp.read([file.workingPath, file.name], function(content) {
        compareOutput(content, kupHtml);
        return done();
      });
    });
  });

  describe("when compiling invalid coffeekup", function() {
    var errorCode, file;
    file = {
      name: "bad.kup",
      workingPath: "tmp",
      ext: function() {
        return path.extname(this.name);
      }
    };
    errorCode = void 0;
    fp.reset();
    before(function(done) {
      return fp.write("tmp/bad.kup", badKup, function() {
        return compiler.compile(file, function(err) {
          errorCode = err;
          return done();
        });
      });
    });
    it("should not create a html file", function() {
      return fp.pathExists([file.workingPath, file.name]).should.not.be;
    });
    return it("should produce error message", function(done) {
      return fp.read([file.workingPath, file.name], function(content) {
        errorCode.toString().should.equal("Error: Parse error on line 1: Unexpected 'COMPARE'");
        return done();
      });
    });
  });

  describe("when compiling valid Haml", function() {
    var file;
    file = {
      name: "good.haml",
      workingPath: "tmp",
      ext: function() {
        return path.extname(this.name);
      }
    };
    fp.reset();
    before(function(done) {
      return fp.write("tmp/good.haml", goodHaml, function() {
        return compiler.compile(file, function() {
          return done();
        });
      });
    });
    it("should create a html file", function() {
      return fp.pathExists([file.workingPath, file.name].should.be.ok);
    });
    return it("should produce valid html", function(done) {
      return fp.read([file.workingPath, file.name], function(content) {
        compareOutput(content, hamlHtml);
        return done();
      });
    });
  });

  describe("when compiling invalid Haml", function() {
    var errorCode, file;
    file = {
      name: "bad.haml",
      workingPath: "tmp",
      ext: function() {
        return path.extname(this.name);
      }
    };
    errorCode = void 0;
    fp.reset();
    before(function(done) {
      return fp.write("tmp/bad.haml", badKup, function() {
        return compiler.compile(file, function(err) {
          errorCode = err;
          return done();
        });
      });
    });
    it("should not create a html file", function() {
      return fp.pathExists([file.workingPath, file.name]).should.not.be;
    });
    return it("should produce error message", function(done) {
      return fp.read([file.workingPath, file.name], function(content) {
        return done();
      });
    });
  });

  describe("when compiling valid Markdown", function() {
    var file;
    file = {
      name: "good.markdown",
      workingPath: "tmp",
      ext: function() {
        return path.extname(this.name);
      }
    };
    fp.reset();
    before(function(done) {
      return fp.write("tmp/good.markdown", goodMarkdown, function() {
        return compiler.compile(file, function() {
          return done();
        });
      });
    });
    it("should create a html file", function() {
      return fp.pathExists([file.workingPath, file.name].should.be.ok);
    });
    return it("should produce valid html", function(done) {
      return fp.read([file.workingPath, file.name], function(content) {
        compareOutput(content, markdownHtml);
        return done();
      });
    });
  });

  describe("when compiling invalid Markdown", function() {
    var file;
    file = {
      name: "bad.markdown",
      workingPath: "tmp",
      ext: function() {
        return path.extname(this.name);
      }
    };
    fp.reset();
    before(function(done) {
      return fp.write("tmp/bad.markdown", badMarkdown, function() {
        return compiler.compile(file, function() {
          return done();
        });
      });
    });
    return it("should produce hot garbage", function(done) {
      return fp.read([file.workingPath, file.name], function(content) {
        content.should.not.equal(hamlHtml);
        return done();
      });
    });
  });

  describe("when compiling valid Less", function() {
    var file;
    file = {
      name: "good.less",
      workingPath: "tmp",
      ext: function() {
        return path.extname(this.name);
      }
    };
    fp.reset();
    before(function(done) {
      return fp.write("tmp/good.less", goodLess, function() {
        return compiler.compile(file, function() {
          return done();
        });
      });
    });
    it("should create a css file", function() {
      return fp.pathExists([file.workingPath, file.name].should.be.ok);
    });
    return it("should produce valid css", function(done) {
      return fp.read([file.workingPath, file.name], function(content) {
        compareOutput(content, lessCss);
        return done();
      });
    });
  });

  describe("when compiling invalid Less", function() {
    var errorCode, file;
    file = {
      name: "bad.less",
      workingPath: "tmp",
      ext: function() {
        return path.extname(this.name);
      }
    };
    errorCode = void 0;
    fp.reset();
    before(function(done) {
      return fp.write("tmp/bad.less", badLess, function() {
        return compiler.compile(file, function(err) {
          errorCode = err;
          return done();
        });
      });
    });
    return it("should not produce css file", function() {
      return (fp.pathExists([file.workingPath, file.name])).should.not.be;
    });
  });

  describe("when compiling valid Sass", function() {
    var file;
    file = {
      name: "good.sass",
      workingPath: "tmp",
      ext: function() {
        return path.extname(this.name);
      }
    };
    fp.reset();
    before(function(done) {
      return fp.write("tmp/good.sass", goodSass, function() {
        return compiler.compile(file, function() {
          return done();
        });
      });
    });
    it("should create a css file", function() {
      return fp.pathExists([file.workingPath, file.name].should.be.ok);
    });
    return it("should produce valid css", function(done) {
      return fp.read([file.workingPath, file.name], function(content) {
        return done();
      });
    });
  });

  describe("when compiling invalid Sass", function() {
    var errorCode, file;
    file = {
      name: "bad.sass",
      workingPath: "tmp",
      ext: function() {
        return path.extname(this.name);
      }
    };
    errorCode = void 0;
    fp.reset();
    before(function(done) {
      return fp.write("tmp/bad.sass", badSass, function() {
        return compiler.compile(file, function(err) {
          errorCode = err;
          return done();
        });
      });
    });
    return it("should not produce css file", function() {
      return (fp.pathExists([file.workingPath, file.name])).should.not.be;
    });
  });

  describe("when compiling valid Scss", function() {
    var file;
    file = {
      name: "good.scss",
      workingPath: "tmp",
      ext: function() {
        return path.extname(this.name);
      }
    };
    fp.reset();
    before(function(done) {
      return fp.write("tmp/good.scss", goodScss, function() {
        return compiler.compile(file, function() {
          return done();
        });
      });
    });
    it("should create a css file", function() {
      return fp.pathExists([file.workingPath, file.name].should.be.ok);
    });
    return it("should produce valid css", function(done) {
      return fp.read([file.workingPath, file.name], function(content) {
        return done();
      });
    });
  });

  describe("when compiling invalid Scss", function() {
    var errorCode, file;
    file = {
      name: "bad.scss",
      workingPath: "tmp",
      ext: function() {
        return path.extname(this.name);
      }
    };
    errorCode = void 0;
    fp.reset();
    before(function(done) {
      return fp.write("tmp/bad.scss", badScss, function() {
        return compiler.compile(file, function(err) {
          errorCode = err;
          return done();
        });
      });
    });
    return it("should not produce css file", function() {
      return (fp.pathExists([file.workingPath, file.name])).should.not.be;
    });
  });

  describe("when compiling valid Stylus", function() {
    var file;
    file = {
      name: "good.styl",
      workingPath: "tmp",
      ext: function() {
        return path.extname(this.name);
      }
    };
    fp.reset();
    before(function(done) {
      return fp.write("tmp/good.styl", goodStylus, function() {
        return compiler.compile(file, function() {
          return done();
        });
      });
    });
    it("should create a css file", function() {
      return fp.pathExists([file.workingPath, file.name].should.be.ok);
    });
    return it("should produce valid css", function(done) {
      return fp.read([file.workingPath, file.name], function(content) {
        compareOutput(content, stylusCss);
        return done();
      });
    });
  });

  describe("when compiling invalid Stylus", function() {
    var errorCode, file;
    file = {
      name: "bad.styl",
      workingPath: "tmp",
      ext: function() {
        return path.extname(this.name);
      }
    };
    errorCode = void 0;
    fp.reset();
    before(function(done) {
      return fp.write("tmp/bad.styl", badStylus, function() {
        return compiler.compile(file, function(err) {
          errorCode = err;
          return done();
        });
      });
    });
    return it("should not produce css file", function() {
      return (fp.pathExists([file.workingPath, file.name])).should.not.be;
    });
  });

}).call(this);
