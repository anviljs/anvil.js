// Generated by CoffeeScript 1.3.1
(function() {
  var Scheduler, scheduler, _;

  _ = require("underscore");

  Scheduler = require("../src/scheduler.js")( _ );

  scheduler = new Scheduler();

  require("should");

  describe("when building an item through a pipeline", function() {
    var expected, start, step1, step2, step3, step4, steps;
    start = "";
    step1 = function(x, done) {
      return done(x + "hello");
    };
    step2 = function(x, done) {
      return done(x + " ");
    };
    step3 = function(x, done) {
      return done(x + "world");
    };
    step4 = function(x, done) {
      return done(x + "!");
    };
    expected = "hello world!";
    steps = [step1, step2, step3, step4];
    return it("should run pipeline in order", function(done) {
      return scheduler.pipeline(start, steps, function(result) {
        result.should.equal(expected);
        return done();
      });
    });
  });

  describe("when manipulating a single item through a pipeline", function() {
    var expected, start, step1, step2, step3, step4, steps;
    start = 100;
    step1 = function(x, done) {
      return done(x / 2);
    };
    step2 = function(x, done) {
      return done(x - 25);
    };
    step3 = function(x, done) {
      return done(x / 5);
    };
    step4 = function(x, done) {
      return done(x + 5);
    };
    expected = 10;
    steps = [step1, step2, step3, step4];
    return it("should run pipeline in order", function(done) {
      return scheduler.pipeline(start, steps, function(result) {
        result.should.equal(expected);
        return done();
      });
    });
  });

  describe("when mutating a single item through a pipeline", function() {
    var expected, start, step1, step2, step3, steps;
    start = "<1> [2] {3}";
    step1 = function(x, done) {
      return done(x.replace(/[<]1[>]/, "one"));
    };
    step2 = function(x, done) {
      return done(x.replace(/[\[]2[\]]/, "two"));
    };
    step3 = function(x, done) {
      return done(x.replace(/[\{]3[\}]/, "three"));
    };
    expected = "one two three";
    steps = [step1, step2, step3];
    return it("should run pipeline in order", function(done) {
      return scheduler.pipeline(start, steps, function(result) {
        result.should.equal(expected);
        return done();
      });
    });
  });

  describe("when running calls in parallel", function() {
    var call, expected, start;
    start = [2, 3, 4];
    call = function(x, done) {
      return done(x * 2);
    };
    expected = [4, 6, 8];
    return it("should return collection (in any order)", function(done) {
      return scheduler.parallel(start, call, function(result) {
        _.difference(result, expected).length.should.equal(0);
        return done();
      });
    });
  });

  describe("when aggregating multiple calls", function() {
    var calls;
    calls = {
      one: function(done) {
        return setTimeout(function() {
          return done(1);
        }, 10);
      },
      two: function(done) {
        return setTimeout(function() {
          return done(2);
        }, 5);
      },
      three: function(done) {
        return setTimeout(function() {
          return done(3);
        }, 1);
      }
    };
    return it("should complete with correctly constructed object", function(done) {
      return scheduler.mapped(calls, function(result) {
        result.one.should.equal(1);
        result.two.should.equal(2);
        result.three.should.equal(3);
        return done();
      });
    });
  });

}).call(this);
