{"name":"Anvil.js","body":"# Anvil\r\n\r\nAnvil started as a way to build a single javascript module from several source files. Build tools that require a lot of explicit/declarative instructions distract from getting work on the project done.\r\n\r\nAnvil is currently being rewritten as CI tool for JS, CSS and HTML.\r\n\r\n***Please note: this description is for the upcoming RC of Anvil and does not represent the version currently available via npm***\r\n\r\n## What Does It Do?\r\n\r\nHere's the current feature list:\r\n\r\n* Create simple directory structure for new projects\r\n* Create build.json files\r\n* Combine files through a comment-based import syntax\r\n* Supports multiple, distinct output files\r\n* Customized file names for output\r\n* Compiles CoffeeScript, Stylus, LESS, Markdown and HAML into 'native' formats (JS, CSS, HTML)\r\n* Post compile pipelines:\r\n  * Minify, Lint, Wrappers, License Headers, Run Tests\r\n* CI mode where anvil will re-compile the project on source file changes\r\n* Hosts multiple projects directories\r\n    * Converts CoffeeScript, Stylus, LESS, Markdown and HAML on the fly\r\n    * Useful for running test suites in the browser\r\n    * Can refresh the page after each build\r\n\r\n## Installation\r\n\r\n    npm install anvil.js -g\r\n\r\n## By Convention\r\n\r\nWithout a build file, Anvil will make assumptions. Here's the list:\r\n\r\n* All your source will be in ./src and get output to ./lib and ./site/js\r\n* All your styles will be in ./style and get output to ./css and ./site/css\r\n* All your markup will be in ./markup and get output to ./site\r\n* All resources will be compiled to JS, CSS and HTML\r\n* All JS and CSS will be minified\r\n* If the project includes a markup or style folder, you're building a site, not a lib\r\n\r\n## The Build File ( large example showing all options )\r\n\r\n    {\r\n        \"source\": \"src\",\r\n        \"style\": \"style\",\r\n        \"markup\": \"markup\",\r\n        {\r\n            \"source\": [ \"lib\", \"site/js\" ],\r\n            \"style\": [ \"css\", \"site/css\" ],\r\n            \"markup\": \"site/\"\r\n        }\r\n        \"lint\": {},\r\n        \"uglify\": {},\r\n        \"cssmin\": {},\r\n        \"extensions\": { \"uglify\": \"min\" },\r\n        \"finalize:\" {\r\n            \"header|header-file\": \"this is some unprocessed text or a file name\",\r\n            \"footer|footer-file\": \"this is some unprocessed text or a file name\"\r\n        },\r\n        \"hosts\": {\r\n          \"/\": \"site\"\r\n        },\r\n        \"name\": \"custom-name.js\",\r\n        \"testWith\": \"mocha|pavlov\",\r\n        \"continuous\": true,\r\n        \"host\": true\r\n    }\r\n\r\n* source is where Anvil expects *all* your code. Don't get fancy or Anvil can't help you :(\r\n* output is where Anvil will write all the build output and temp files. This should NOT be the same as source.\r\n* lint specifies that you want your output files run through JSLint before Uglify and Gzip occur.\r\n* uglify specifies that you want your output uglified. \r\n\r\n* finalize\r\n    * header prepends the following string to the final output ONLY.\r\n    * footer appends the following string to the final output ONLY.\r\n    * If header-file or footer-file is provided, the file will be read and the contents used\r\n    * this section was added to support adding boiler plate text headers to minified/gzipped output\r\n\r\n* name\r\n    * for projects with a single file output, this will replace the name of the output file\r\n    * for projects with multiple file outputs, you can provide a lookup hash to over-write\r\n        each specific file name\r\n\r\nThere's also another option called justCoffee that will cause anvil to maintain all output in coffeescript instead of compiling it to js.\r\n\r\n## Jumpstart New Projects\r\n\r\nThere are two ways to do this now - one for lib projects and one for sites.\r\n\r\nAnvil will build a set of standard project directories for you and even spit out a build.json file based on the conventional use.\r\n\r\n### Lib Projects\r\n\r\n    anvil --lib <projectName>\r\n\r\nWill produce a directory structure that looks like this:\r\n\r\n    -projectName\r\n        |-ext\r\n        |-src\r\n        |-lib\r\n        |-spec\r\n        build.json\r\n\r\n\r\n### Site Projects\r\n\r\n    anvil --site <projectName>\r\n\r\nWill produce a directory structure that looks like this:\r\n\r\n    -projectName\r\n        |-ext\r\n        |-src\r\n        |-site\r\n            |-js\r\n            |-css\r\n        |-style\r\n        |-markup\r\n        |-lib\r\n        |-css\r\n        |-spec\r\n        build.json\r\n\r\n## Building By Convention\r\n\r\nIf you don't specify your own build file, anvil assumes you intend to use a build.json file. If one isn't present, it will use its own conventions to build your project. If that's all you need, great! Chances are you'll want a build.json that's configured for your specific project. \r\n\r\nNow that there are two types of projects, Anvil infers the project type based on the folders in your project.\r\n\r\n## Combining source files\r\n\r\nAnvil allows you to combine source files by using a commented import syntax:\r\n\r\n**Javascript**\r\n\r\n    //import(\"dependency.{ext}\");\r\n\r\n**Coffeescript**\r\n\r\n    ###import \"dependency.{ext}\" ###\r\n\r\n**Stylus, LESS, CSS**\r\n\r\n    /* import \"dependency.{ext}\" */\r\n\r\nWhen you use Anvil to compile your project, it will traverse all the files in your source directory and combine them so that your top level files are what get output. **Warning** Currently, Anvil is not clever enough to detect circular dependencies created via import statements and it will _shatter your world_ if you do this.\r\n\r\n## Building With Specific Build Files\r\n\r\nTo build with a specific build file type\r\n\r\n    anvil -b <buildfile>\r\n\r\n## Creating New / Additional Build Files\r\n\r\nTo create a build file for lib projects, you can just type the following:\r\n\r\n    anvil --libfile <buildfile>\r\n\r\nor for a site project\r\n\r\n    anvil --sitefile <buildfile>\r\n\r\nand it will create the build file for you. If you don't include the file name, anvil will create a build.json (possibly overwriting your existing one, be careful!)\r\n\r\n## Custom Naming\r\n\r\nFor projects with a single file output, you can provide a name property which will override the default name of the file:\r\n\r\n    \"name\": \"my-custom-name.js\"\r\n\r\nFor projects where there are multiple files in the output, you must provide a hash object that will tell anvil how to rename each specific file. For example, if you have a build producing 'one.js' and 'two.js' you would need to provide a hash object that would tell anvil how to name each:\r\n\r\n    \"name\": {\r\n        \"one.js\" : \"main.js\",\r\n        \"two.js\" : \"plugin.js\"\r\n    }\r\n\r\n## Continuous Integration\r\n\r\nAnvil will watch your source directory for changes and rebuild the project in the event any changes are saved to the files in the directory.\r\n\r\n    anvil --ci\r\n\r\nRemember, if you intend to always run in this mode, you can put a \"continuous\": true in your build.json file.\r\n\r\n## Hosting\r\n\r\nAnvil provides local hosting based on the \"hosts\" config block. Adding -h, --host argument or a \"host\": true block to your build.json file will cause Anvil to host your project's directories (according to configuration) at port 3080 via express.\r\n\r\n    anvil -h\r\n\r\nor\r\n\r\n    anvil --host\r\n\r\nCoffee, Stylus, LESS, Mardown, and HAML are all converted at request time if they are requested.\r\n\r\nThe hosts key in the build.json file is where you can control what each folder will be hosted at in the relative url.\r\n\r\n    \"hosts\": {\r\n        \"/example1\" : \"./examples/example1\",\r\n        \"/example2\" : \"./examples/example2\"\r\n    }\r\n\r\nThe block above would host the folder ./example/example1 at http://localhost:3080/example1 and folder ./example/example2 at http://localhost:3080/example2\r\n\r\n### Testing With Mocha\r\n\r\nMocha might be the best thing ever. You can tell Anvil to run your spec files with mocha from the command line or by including a mocha block in the build.json.\r\n\r\n    anvil --mocha\r\n\r\nor by adding \"testWith\": \"mocha\" to your build.json file.\r\n\r\n## Too chatty?\r\n\r\nYou can tell anvil to run in quiet mode (it will still print errors (red) and step completions (green) )\r\n\r\n    anvil -q","tagline":"A continuous integration tool for javascript, css and html.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}