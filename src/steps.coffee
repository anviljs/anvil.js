# ## createStep ##
# 
# ### Args:
# * _step {String}_: name of step
# * _onFile {Function}_: 
createStep = ( step, onFile )->
    return ( item, done ) ->
        # If this step is not in the config, skip it.
        unless config[step]
            done item
        else
            onStep "Step - #{step}: #{item}"
            readFile item, ( file_contents ) ->
                onFile item, file_contents, done

# ## createTransformStep ##
# 
# ### Args:
# * _step {String}_: name of step
# * _transform {Function}_: transforms the file's contents
# * _rename {Function}_: generate new name based on original name
createTransformStep = ( step, transform, rename )->
    return ( item, done ) ->
        # If this step is not in the config, skip it.
        unless config[step]
            done item
        else
            onStep "Step - #{step}: #{item}"
            erase = false
            # New output file path generated by _rename_
            output = rename item, () -> erase = true
            # Perform the transform step, erasing the original file if supposed to
            transformFile item, transform, output, ( x ) ->
                onComplete "Step - #{step} successful for #{item}"
                if erase
                  fs.unlink item, () -> done x
                else
                  done x

# ## renameFile ##
# Transform step for renaming output files
# * _step_: rename
renameFile = createTransformStep "rename",
  # No additional transform beyond renaming  
  ( x, done ) ->
    done x
  ,
  # Rename the file
  ( x, erase ) ->
    name = require('path').basename x
    newName = config.getName name
    path = x
    unless name == newName
      path = x.replace( name, newName )
      onEvent "... renaming #{x} to #{path}"
      erase()
      #fs.renameSync x, path
    # Return new path
    path

# ## lint ##
# Analysis step checks for bad practices and non-conformant code
# * _step_: lint
lint = createStep "lint", ( item, file, done ) ->
    result = jslint file, {}
    unless result
        onError "LINT FAILED ON #{item}"
        errors = _.select( jslint.errors, ( e ) -> e )
        console.log "   line #{x.line}, pos #{x.character} - #{x.reason}".red for x in errors
    else
        onComplete "#{item} passed lint!"
    done item

# ## uglify ##
# Minifies javascript and outputs a minified file alongside the unminified version
# * _step_: uglify
uglify = createTransformStep "uglify",
    # Minify the file 
    ( x, done ) ->
        ast = jsp.parse x
        ast = pro.ast_mangle ast
        ast = pro.ast_squeeze ast
        done pro.gen_code ast
    ,
    # Generate filename for minified file
    ( x ) -> x.replace(".js","." + ext.uglify + ".js")

# ## gzip ##
# Creates a gzipped version of the file
# * _step_: gzip
gzip = createTransformStep "gzip",
    # Gzip file
    ( x, done ) ->
        gzipper x, ( err, result ) -> done result
    ,
    # Generate filename for gzipped file
    ( x ) -> x.replace(".js","." + ext.gzip + ".js")

# ## wrap ##
# Applies wrapper code/comments
# * _step_: wrap
wrap = createTransformStep "wrap",
    ( x, done ) ->
        if config.wrap.prefix
            x = config.wrap.prefix + "\n" + x
        if config.wrap.suffix
            x = x + "\n" + config.wrap.suffix
        done x
    ,
    # No rename. Just return the original
    ( x ) -> x

# ## finalize ##
# Apply final header and footer
# * _step_: finalize
finalize = createTransformStep "finalize",
    ( x, done ) ->
      if config.finalize.header
        x = "#{ config.finalize.header }\n#{ x }"
      if config.finalize.footer
        x = x + "\n#{ config.finalize.footer }\n"
      done x
    ,
    # No rename. Just return the original
    ( x ) -> x